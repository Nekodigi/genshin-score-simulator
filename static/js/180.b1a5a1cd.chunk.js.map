{"version":3,"file":"static/js/180.b1a5a1cd.chunk.js","mappings":"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","sources":["utils/func/opencv.ts","utils/func/artifactScan.ts","components/molecules/AutoFillButton.tsx"],"sourcesContent":["import cv, { Mat, Point, Rect } from \"@techstark/opencv-js\";\r\n\r\nexport const imreadUrl = async (url: string): Promise<Mat> => {\r\n  let e = await loadImage(url);\r\n  //console.log(e.target);\r\n  return cv.imread(e.target as HTMLElement);\r\n};\r\n\r\nexport const loadImage = (src: string): Promise<Event> => {\r\n  return new Promise((resolve, reject) => {\r\n    const i = new Image();\r\n    i.onload = (e) => resolve(e);\r\n    i.onerror = (e) => reject(e);\r\n    i.src = src;\r\n  });\r\n};\r\n\r\nexport const imshowTrimmed = (\r\n  ref: React.RefObject<HTMLCanvasElement>,\r\n  src: Mat,\r\n  scale: number,\r\n  threshold: number,\r\n  p1: Point,\r\n  p2: Point\r\n) => {\r\n  let i = src.roi(new Rect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y));\r\n  cv.resize(i, i, new cv.Size(i.size().width * scale, i.size().height * scale));\r\n  cv.threshold(\r\n    i,\r\n    i,\r\n    Math.abs(threshold),\r\n    255,\r\n    threshold >= 0 ? cv.THRESH_BINARY : cv.THRESH_BINARY_INV\r\n  );\r\n  cv.imshow(ref.current!, i);\r\n};\r\n","import cv, { MinMaxLoc, Rect } from \"@techstark/opencv-js\";\r\nimport Tesseract, { createWorker } from \"tesseract.js\";\r\nimport { setKeyType, slotKeyType } from \"../consts/Artifact\";\r\nimport { statKeyType } from \"../consts/Stat\";\r\nimport { ArtifactType } from \"../types/Artifact\";\r\nimport { Language } from \"../types/Language\";\r\nimport { SubstatType } from \"../types/Substat\";\r\nimport { imshowTrimmed } from \"./opencv\";\r\nimport { isAlphabet } from \"./string\";\r\nimport { str2artifactSet, str2stat, str2stats } from \"./strToArtifact\";\r\nimport setChars from \"../consts/set-charlist.json\";\r\nimport { downloadImage } from \"./download\";\r\n\r\n//PROCESSED\r\nexport type ArtifactScanOut = {\r\n  setKey: ScanResSetKey;\r\n  rarity: ScanResNum;\r\n  level: ScanResNum;\r\n  slotKey: ScanResSlotKey;\r\n  mainStatKey: ScanResStatKey;\r\n  substats: ScanResStat[];\r\n  warning: string[];\r\n  error: string[];\r\n};\r\n\r\n//scale change sample size: larger precise, smaller faster\r\nexport type ArtifactScanStrOut = {\r\n  name: ScanRes;\r\n  slot: ScanRes;\r\n  mainKey: ScanRes;\r\n  mainValue: ScanRes;\r\n  star: ScanRes;\r\n  level: ScanRes;\r\n  substat: ScanRes;\r\n};\r\n\r\nexport const ScanRes2GOOD = (scanned: ArtifactScanOut): ArtifactType => {\r\n  return {\r\n    setKey: scanned.setKey.key,\r\n    rarity: scanned.rarity.value as 1 | 2 | 3 | 4 | 5,\r\n    level: scanned.level.value,\r\n    slotKey: scanned.slotKey.value,\r\n    mainStatKey: scanned.mainStatKey.key,\r\n    substats: scanned.substats.map((substat) => {\r\n      return { key: substat.key, value: substat.value } as SubstatType;\r\n    }),\r\n  };\r\n};\r\n\r\nexport const ArtifactScan = async (\r\n  src: cv.Mat,\r\n  scale: number,\r\n  left: cv.Mat,\r\n  right: cv.Mat,\r\n  mid: cv.Mat,\r\n  buf: React.RefObject<HTMLCanvasElement>,\r\n  worker?: Tesseract.Worker,\r\n  setProgress?: (value: number) => void\r\n) => {\r\n  let strs = await ArtifactScanStr(\r\n    src,\r\n    scale,\r\n    left,\r\n    right,\r\n    mid,\r\n    buf,\r\n    worker,\r\n    setProgress\r\n  );\r\n\r\n  console.log(strs);\r\n\r\n  let warning: string[] = [];\r\n  let error: string[] = [];\r\n\r\n  let lang: Language = isAlphabet(strs.slot.value.charAt(0)) ? \"en\" : \"ja\";\r\n  let res = {} as ArtifactScanOut;\r\n  let set = str2artifactSet(strs.name.value, lang);\r\n  res.setKey = { key: set.key, confidence: set.confidence };\r\n  res.slotKey = { value: set.slot, confidence: set.confidence };\r\n  if (set.confidence < 0.6)\r\n    set.confidence > 0.4\r\n      ? warning.push(\"set\", \"slot\")\r\n      : error.push(\"set\", \"slot\");\r\n  res.rarity = {\r\n    value: Math.max(Math.min(strs.star.value.replace(/\\s/g, \"\").length, 5), 1),\r\n    confidence: strs.star.confidence,\r\n  };\r\n  if (strs.star.confidence < 0.5)\r\n    strs.star.confidence > 0.3 ? warning.push(\"star\") : error.push(\"star\");\r\n  //could compare with main stat and improve accuracy\r\n  res.level = {\r\n    value: Number(strs.level.value.replace(/^\\D+/g, \"\")),\r\n    confidence: strs.level.confidence,\r\n  };\r\n  if (strs.level.confidence < 0.8)\r\n    strs.level.confidence > 0.5 ? warning.push(\"level\") : error.push(\"level\");\r\n  let mainstat = str2stat(\r\n    strs.mainKey.value + \"+\" + strs.mainValue.value,\r\n    lang\r\n  );\r\n  res.mainStatKey = { key: mainstat.key, confidence: mainstat.confidence };\r\n  if (mainstat.confidence < 0.6)\r\n    mainstat.confidence > 0.3\r\n      ? warning.push(\"mainstat\")\r\n      : error.push(\"mainstat\");\r\n\r\n  res.substats = str2stats(strs.substat.value, lang);\r\n  res.substats.forEach((stat, i) => {\r\n    if (stat.confidence < 0.7)\r\n      stat.confidence > 0.5\r\n        ? warning.push(`substat${i}`)\r\n        : error.push(`substat${i}`);\r\n  });\r\n  res.warning = warning;\r\n  res.error = error;\r\n\r\n  return res;\r\n};\r\n\r\nexport const ArtifactScanStr = async (\r\n  src_: cv.Mat,\r\n  scale: number,\r\n  left: cv.Mat,\r\n  right: cv.Mat,\r\n  mid: cv.Mat,\r\n  buf: React.RefObject<HTMLCanvasElement>,\r\n  worker?: Tesseract.Worker,\r\n  setProgress?: (value: number) => void\r\n) => {\r\n  let time = performance.now();\r\n  setProgress && setProgress(0);\r\n  let src = new cv.Mat();\r\n  let small = new cv.Mat();\r\n  src_.copyTo(src);\r\n\r\n  let res = {} as ArtifactScanStrOut;\r\n\r\n  const resize = () => {\r\n    let aspect = src.size().width / src.size().height;\r\n    cv.resize(src, small, new cv.Size((720 / 2) * aspect, 720 / 2)); //* RESIZE FOR FASTER RES,\r\n    cv.resize(src, src, new cv.Size(720 * scale * aspect, 720 * scale)); //* RESIZE FOR FASTER RES,\r\n  };\r\n\r\n  let dst = new cv.Mat();\r\n  let mask = new cv.Mat();\r\n\r\n  const rightMatch = async () => {\r\n    cv.matchTemplate(small, right, dst, cv.TM_CCOEFF_NORMED, mask);\r\n    let result = cv.minMaxLoc(dst, mask) as any as MinMaxLoc;\r\n    return result.maxLoc.x + right.cols;\r\n  };\r\n  const leftMatch = async () => {\r\n    cv.matchTemplate(small, left, dst, cv.TM_CCOEFF_NORMED, mask);\r\n    let result = cv.minMaxLoc(dst, mask) as any as MinMaxLoc;\r\n    return result.maxLoc.x;\r\n  };\r\n\r\n  resize();\r\n  setProgress && setProgress(10);\r\n  // console.log(performance.now() - time, src.size());\r\n  // time = performance.now();\r\n\r\n  const [rightright, leftleft] = await Promise.all([rightMatch(), leftMatch()]);\r\n  setProgress && setProgress(30);\r\n  // console.log(performance.now() - time, \"left right match\");\r\n  // time = performance.now();\r\n\r\n  let slimRect = new cv.Rect(\r\n    leftleft * scale * 2,\r\n    0,\r\n    (rightright - leftleft) * scale * 2,\r\n    src.size().height\r\n  );\r\n  let slimImg = src.roi(slimRect);\r\n  //*RESIZE AFTER CLOP!!!!!!!!!\r\n  let aspect = slimImg.size().width / slimImg.size().height;\r\n\r\n  cv.resize(slimImg, slimImg, new cv.Size(352 * scale, (352 * scale) / aspect));\r\n\r\n  cv.matchTemplate(slimImg, mid, dst, cv.TM_CCOEFF, mask);\r\n  let result = cv.minMaxLoc(dst, mask) as any as MinMaxLoc;\r\n  let maxPoint = result.maxLoc;\r\n  let point = new cv.Point(maxPoint.x + mid.cols, maxPoint.y + mid.rows);\r\n  setProgress && setProgress(40);\r\n  // console.log(performance.now() - time, \"slimmed\");\r\n  // time = performance.now();\r\n\r\n  let midSeparator = maxPoint.y + mid.rows / 2;\r\n  let topHalfHeight = 189;\r\n  let topHalfBottom = 156;\r\n  let topHalfR = new cv.Rect(\r\n    12,\r\n    midSeparator - topHalfHeight * scale,\r\n    328 * scale,\r\n    (topHalfHeight + topHalfBottom) * scale\r\n  );\r\n  let trimmedImg = slimImg.roi(topHalfR);\r\n  cv.cvtColor(trimmedImg, trimmedImg, cv.COLOR_BGR2GRAY);\r\n  setProgress && setProgress(50);\r\n  // console.log(performance.now() - time, \"trimmed\");\r\n  // time = performance.now();\r\n\r\n  let name1p = new cv.Point(17 * scale, 2 * scale);\r\n  let name2p = new cv.Point((17 + 295) * scale, (2 + 28) * scale);\r\n  let part1p = new cv.Point(16 * scale, 46 * scale);\r\n  let part2p = new cv.Point((16 + 130) * scale, (46 + 18) * scale);\r\n  let mainKey1p = new cv.Point(16 * scale, 100 * scale);\r\n  let mainKey2p = new cv.Point((16 + 130) * scale, (100 + 18) * scale);\r\n  let mainValue1p = new cv.Point(16 * scale, 118 * scale);\r\n  let mainValue2p = new cv.Point((16 + 102) * scale, (118 + 32) * scale);\r\n  let star1p = new cv.Point(16 * scale, 156 * scale);\r\n  let star2p = new cv.Point((16 + 116) * scale, (156 + 24) * scale);\r\n  let level1p = new cv.Point(24 * scale, 208 * scale);\r\n  let level2p = new cv.Point((24 + 34) * scale, (208 + 16) * scale);\r\n  let substat1p = new cv.Point(32 * scale, 237 * scale);\r\n  let substat2p = new cv.Point((32 + 198) * scale, (237 + 106) * scale);\r\n\r\n  if (worker === undefined) {\r\n    worker = await createWorker(); //{logger: (m) => console.log(m), // Add logger here}\r\n    await worker.loadLanguage(\"eng+jpn\");\r\n    await worker.initialize(\"eng+jpn\");\r\n  }\r\n  setProgress && setProgress(60);\r\n  // console.log(performance.now() - time, \"worker initialized\");\r\n  // time = performance.now();\r\n\r\n  const fname = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 0.75, -180, name1p, name2p);\r\n    downloadImage(buf);\r\n    //console.log(setChars.replace(/[A-z]/g, \"\"));\r\n    // await worker!.setParameters({\r\n    //   tessedit_char_whitelist: setChars.replace(/[A-z]/g, \"\"),\r\n    // });\r\n    let result = await worker!.recognize(buf.current!.toDataURL()); //, \"jpn\"\r\n    // await worker!.setParameters({\r\n    //   tessedit_char_whitelist: undefined,\r\n    // });\r\n    res.name = { value: result.data.text, confidence: result.data.confidence };\r\n  };\r\n\r\n  const fslot = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 1, -180, part1p, part2p);\r\n    let result = await worker!.recognize(buf.current!.toDataURL()); //, \"jpn\"\r\n    res.slot = { value: result.data.text, confidence: result.data.confidence };\r\n  };\r\n\r\n  const fmainKey = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 1, -135, mainKey1p, mainKey2p);\r\n    downloadImage(buf);\r\n    let result = await worker!.recognize(buf.current!.toDataURL()); //, \"jpn\" //nograyscale\r\n    res.mainKey = {\r\n      value: result.data.text,\r\n      confidence: result.data.confidence,\r\n    };\r\n  };\r\n  const fmainValue = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 0.75, -180, mainValue1p, mainValue2p);\r\n    let result = await worker!.recognize(buf.current!.toDataURL());\r\n    res.mainValue = {\r\n      value: result.data.text,\r\n      confidence: result.data.confidence,\r\n    };\r\n  };\r\n\r\n  const fstar = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 1, -150, star1p, star2p);\r\n    let result = await worker!.recognize(buf.current!.toDataURL()); //, \"chi_tra\"\r\n    res.star = { value: result.data.text, confidence: result.data.confidence };\r\n  };\r\n\r\n  const flevel = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 1, -150, level1p, level2p);\r\n    await worker!.setParameters({\r\n      tessedit_char_whitelist: \"+0123456789\",\r\n    });\r\n    let result = await worker!.recognize(buf.current!.toDataURL()); //nograyscale\r\n    await worker!.setParameters({\r\n      tessedit_char_whitelist: undefined,\r\n    });\r\n    res.level = { value: result.data.text, confidence: result.data.confidence };\r\n  };\r\n\r\n  const fsubstat = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 1, 140, substat1p, substat2p);\r\n    let result = await worker!.recognize(buf.current!.toDataURL()); //, \"jpn\"\r\n    res.substat = {\r\n      value: result.data.text,\r\n      confidence: result.data.confidence,\r\n    };\r\n  };\r\n\r\n  // setProgress && setProgress(70);\r\n  //console.log(performance.now() - time, \"Start tesseract\");\r\n  // time = performance.now();\r\n  await fname();\r\n  await fslot();\r\n  await fmainKey();\r\n  await fmainValue();\r\n  await fstar();\r\n  await flevel();\r\n  await fsubstat();\r\n\r\n  //await worker.terminate();\r\n  setProgress && setProgress(100);\r\n  // console.log(performance.now() - time, \"end tesseract\");\r\n  // time = performance.now();\r\n  return res;\r\n};\r\n\r\nexport type ScanRes = {\r\n  value: string;\r\n  confidence: number;\r\n};\r\n\r\nexport type ScanResSlotKey = {\r\n  value: slotKeyType;\r\n  confidence: number;\r\n};\r\nexport type ScanResNum = {\r\n  value: number;\r\n  confidence: number;\r\n};\r\n\r\nexport type ScanResSetKey = {\r\n  key: setKeyType;\r\n  confidence: number;\r\n};\r\n\r\nexport type ScanResStat = {\r\n  key: statKeyType;\r\n  value: number;\r\n  confidence: number;\r\n};\r\n\r\nexport type ScanResStatKey = {\r\n  key: statKeyType;\r\n  confidence: number;\r\n};\r\n","import { faCamera } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Box, CircularProgress, LinearProgress, useTheme } from \"@mui/material\";\r\nimport cv, { Mat } from \"@techstark/opencv-js\";\r\nimport { useContext, useEffect, useCallback } from \"react\";\r\nimport Tesseract, { createWorker } from \"tesseract.js\";\r\nimport { Artifact } from \"../../utils/class/Artifact\";\r\nimport { EditorContext } from \"../../utils/contexts/EditorContext\";\r\nimport { IconTextButton } from \"./IconTextButton\";\r\nimport { useRef, useState } from \"react\";\r\nimport { imreadUrl } from \"../../utils/func/opencv\";\r\nimport { ArtifactScan, ScanRes2GOOD } from \"../../utils/func/artifactScan\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst AutoFillButton = () => {\r\n  let { editor } = useContext(EditorContext);\r\n  const dummyImgRef = useRef<HTMLCanvasElement>(null);\r\n  const [templateImgs, setTemplateImgs] = useState<Mat[] | undefined>();\r\n  const [worker, setWorker] = useState<Tesseract.Worker>();\r\n  const [imgSrc, setImgSrc] = useState(\"\");\r\n  const { t } = useTranslation([\"editor\", \"common\"]);\r\n\r\n  let scale = 1.5; //small faster large precise\r\n\r\n  const loadTemplate = async () => {\r\n    let i1 = await imreadUrl(\"template/right.png\");\r\n    cv.resize(i1, i1, new cv.Size(i1.size().width / 2, i1.size().height / 2));\r\n    let i2 = await imreadUrl(\"template/left.png\");\r\n    cv.resize(i2, i2, new cv.Size(i2.size().width / 2, i2.size().height / 2));\r\n    let i3 = await imreadUrl(\"template/mid.png\");\r\n    cv.resize(i3, i3, new cv.Size(i3.size().width / 2, i3.size().height / 2));\r\n    setTemplateImgs([i1, i2, i3]);\r\n    //console.log(\"SET IMAGE\");\r\n    return [i1, i2, i3];\r\n  };\r\n\r\n  const initWorker = async () => {\r\n    let worker = await createWorker(); //{logger: (m) => console.log(m), // Add logger here}\r\n    await worker.loadLanguage(\"eng+jpn\");\r\n    await worker.initialize(\"eng+jpn\");\r\n    setWorker(worker);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (templateImgs) return;\r\n    initWorker();\r\n    cv[\"onRuntimeInitialized\"] = async () => {\r\n      let templateImgs_ = await loadTemplate();\r\n      const pasteFunc = (e) => pasteImage(e.clipboardData.files, templateImgs_);\r\n      window.addEventListener(\"paste\", pasteFunc);\r\n      return () => {\r\n        window.removeEventListener(\"paste\", pasteFunc);\r\n      };\r\n    };\r\n  }, []);\r\n\r\n  const theme = useTheme();\r\n\r\n  const uploadImage = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    console.log(e.target.files);\r\n    if (\r\n      e.target.files === null ||\r\n      e.target.files.length === 0 ||\r\n      templateImgs === undefined\r\n    )\r\n      return;\r\n    setArtifactFromImage(e.target.files[0], templateImgs as Mat[]);\r\n    e.target.files = null;\r\n  };\r\n\r\n  const pasteImage = (files: Blob, templateImgs: Mat[]) => {\r\n    if (files === null || templateImgs === undefined) return;\r\n    setArtifactFromImage(files[0], templateImgs);\r\n  };\r\n\r\n  const setArtifactFromImage = async (file: Blob, templateImgs: Mat[]) => {\r\n    if (worker === undefined) await loadTemplate();\r\n    editor.setInfo({ sevarity: \"info\", text: t(\"common:info.loadStart\") });\r\n    let url = URL.createObjectURL(file);\r\n    setImgSrc(url);\r\n    //try {\r\n    //let path = URL.createObjectURL(file);\r\n    let i = await imreadUrl(url);\r\n    try {\r\n      let res = await ArtifactScan(\r\n        i,\r\n        scale,\r\n        templateImgs[1],\r\n        templateImgs[0],\r\n        templateImgs[2],\r\n        dummyImgRef,\r\n        worker\r\n      );\r\n      console.log(res);\r\n      console.log(res.warning, res.error);\r\n      let good = ScanRes2GOOD(res);\r\n      editor.setArtifact(good);\r\n      console.log(good);\r\n      if (res.warning.length === 0 && res.error.length === 0) {\r\n        editor.setInfo({\r\n          sevarity: \"success\",\r\n          text: t(\"common:info.loadSuccess\"),\r\n        });\r\n      } else {\r\n        editor.setInfo({\r\n          sevarity: \"warning\",\r\n          text: t(\"common:info.loadWarning\"),\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"CANNOT READ\", e);\r\n      editor.setInfo({ sevarity: \"error\", text: t(\"common:info.loadFailed\") });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"column\" gap={1}>\r\n      {worker !== undefined && templateImgs !== undefined ? (\r\n        <IconTextButton\r\n          text={t(\"editor.uploadScreenShot\")!}\r\n          icon={faCamera}\r\n          color={theme.palette.info.dark}\r\n        >\r\n          <input onChange={uploadImage} type=\"file\" accept=\"image/*\" hidden />\r\n          <canvas ref={dummyImgRef} style={{ display: \"none\" }} />\r\n        </IconTextButton>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n      {/* <img\r\n        style={{ padding: 16, maxHeight: 256, objectFit: \"contain\" }}\r\n        src={imgSrc}\r\n      /> */}\r\n    </Box>\r\n  );\r\n};\r\nexport default AutoFillButton;\r\n"],"names":["imreadUrl","url","loadImage","e","cv","target","src","Promise","resolve","reject","i","Image","onload","onerror","imshowTrimmed","ref","scale","threshold","p1","p2","roi","Rect","x","y","size","width","height","Math","abs","current","ArtifactScan","left","right","mid","buf","worker","setProgress","ArtifactScanStr","strs","console","log","warning","error","lang","isAlphabet","slot","value","charAt","res","set","str2artifactSet","name","setKey","key","confidence","slotKey","push","rarity","max","min","star","replace","length","level","Number","mainstat","str2stat","mainKey","mainValue","mainStatKey","substats","str2stats","substat","forEach","stat","src_","performance","now","small","copyTo","resize","aspect","dst","mask","rightMatch","result","maxLoc","cols","leftMatch","all","rightright","leftleft","slimRect","slimImg","maxPoint","rows","midSeparator","topHalfR","trimmedImg","name1p","name2p","part1p","part2p","mainKey1p","mainKey2p","mainValue1p","mainValue2p","star1p","star2p","level1p","level2p","substat1p","substat2p","undefined","createWorker","loadLanguage","initialize","fname","downloadImage","recognize","toDataURL","data","text","fslot","fmainKey","fmainValue","fstar","flevel","setParameters","tessedit_char_whitelist","fsubstat","editor","useContext","EditorContext","dummyImgRef","useRef","useState","templateImgs","setTemplateImgs","setWorker","setImgSrc","t","useTranslation","loadTemplate","i1","i2","i3","initWorker","useEffect","templateImgs_","pasteFunc","pasteImage","clipboardData","files","window","addEventListener","removeEventListener","theme","useTheme","uploadImage","setArtifactFromImage","file","setInfo","sevarity","URL","createObjectURL","good","scanned","map","setArtifact","Box","display","flexDirection","gap","IconTextButton","icon","faCamera","color","palette","info","dark","onChange","type","accept","hidden","style","CircularProgress"],"sourceRoot":""}