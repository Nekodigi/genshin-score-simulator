{"version":3,"file":"static/js/335.e1241e47.chunk.js","mappings":"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","sources":["utils/func/opencv.ts","utils/func/strToArtifact.ts","utils/func/artifactScan.ts","components/molecules/AutoFillButton.tsx"],"sourcesContent":["import cv, { Mat, Point, Rect } from \"@techstark/opencv-js\";\r\n\r\nexport const imreadUrl = async (url: string): Promise<Mat> => {\r\n  let e = await loadImage(url);\r\n  //console.log(e.target);\r\n  return cv.imread(e.target as HTMLElement);\r\n};\r\n\r\nexport const loadImage = (src: string): Promise<Event> => {\r\n  return new Promise((resolve, reject) => {\r\n    const i = new Image();\r\n    i.onload = (e) => resolve(e);\r\n    i.onerror = (e) => reject(e);\r\n    i.src = src;\r\n  });\r\n};\r\n\r\nexport const imshowTrimmed = (\r\n  ref: React.RefObject<HTMLCanvasElement>,\r\n  src: Mat,\r\n  scale: number,\r\n  threshold: number,\r\n  p1: Point,\r\n  p2: Point\r\n) => {\r\n  let i = src.roi(new Rect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y));\r\n  cv.resize(i, i, new cv.Size(i.size().width * scale, i.size().height * scale));\r\n  cv.threshold(\r\n    i,\r\n    i,\r\n    Math.abs(threshold),\r\n    255,\r\n    threshold >= 0 ? cv.THRESH_BINARY : cv.THRESH_BINARY_INV\r\n  );\r\n  cv.imshow(ref.current!, i);\r\n};\r\n","import { setKey, setKeyType, slotKey, slotKeyType } from \"../consts/Artifact\";\r\nimport { similarity } from \"./string\";\r\nimport artifacts from \"../consts/genshindb-partial.json\";\r\nimport { statDef, statKey, statKeyType } from \"../consts/Stat\";\r\nimport { Language } from \"../types/Language\";\r\nimport { ArtifactDB } from \"../types/Artifact\";\r\n\r\nexport type str2artifactSetOut = {\r\n  key: setKeyType;\r\n  slot: slotKeyType;\r\n  confidence: number;\r\n};\r\n\r\nexport const str2artifactSet = (\r\n  str: string,\r\n  lang: Language\r\n): str2artifactSetOut => {\r\n  let maxSim = 0;\r\n  let key_: setKeyType = \"Adventurer\";\r\n  let slot_: slotKeyType = \"circlet\";\r\n  if (lang === \"ja\") str = str.replace(/\\s/g, \"\");\r\n\r\n  setKey.forEach((key) => {\r\n    // let a = artifacts(key, {\r\n    //   resultLanguage: lang,\r\n    // })!;\r\n    let a = artifacts[key] as ArtifactDB;\r\n    slotKey.forEach((slot) => {\r\n      if (a[slot] !== undefined) {\r\n        let sim = similarity(str, a[slot]!.name[lang]);\r\n        if (sim > maxSim) {\r\n          key_ = key;\r\n          slot_ = slot;\r\n          maxSim = sim;\r\n        }\r\n      }\r\n    });\r\n  });\r\n  return { key: key_, slot: slot_, confidence: maxSim };\r\n};\r\n\r\nexport type str2statOut = {\r\n  key: statKeyType;\r\n  value: number;\r\n  confidence: number;\r\n};\r\n\r\nexport const str2stats = (str: string, lang: Language): str2statOut[] => {\r\n  var strs = str.split(\"\\n\");\r\n  strs = strs.filter((str_) => str_ !== \"\");\r\n  var targets: string[] = [];\r\n  for (let i = 0; i < strs.length; i++) {\r\n    let str_ = strs[i];\r\n    if (\r\n      str_.replace(/\\s/g, \"\").includes(\"Set\") ||\r\n      str_.replace(/\\s/g, \"\").includes(\"セット\")\r\n    ) {\r\n      break;\r\n    }\r\n    targets.push(str_);\r\n  }\r\n  for (let i = 0; i < 4; i++) {\r\n    if (targets[i] === undefined) targets[i] = \"\";\r\n  }\r\n  return targets.map((str) => str2stat(str, lang));\r\n};\r\n\r\nexport const str2stat = (str: string, lang: Language): str2statOut => {\r\n  if (str === \"\") return { key: \"\", value: 0, confidence: 1 };\r\n  let datas = str.split(\"+\"); //plus could be lost\r\n  if (datas.length === 1) {\r\n    //console.log(\"+ error\");\r\n    //could be plus detection ERROR\r\n    for (let i = 0; i < datas[0].length; i++) {\r\n      if (\"⓪①②③④⑤⑥⑦⑧⑨0123456789\".includes(datas[0][i])) {\r\n        datas[1] = datas[0].substring(i);\r\n        datas[0] = datas[0].substring(0, i);\r\n        //console.log(`split at ${i} ${datas[0]} ${datas[1]}`);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  let key_ = datas[0] + (str.includes(\"%\") ? \"%\" : \"\");\r\n  var value_ = str.includes(\"%\")\r\n    ? datas[1].split(\"%\")[0].replaceAll(\"%\", \"\").replaceAll(\" \", \"\")\r\n    : datas[1]; //10% => 10\r\n  let maxSim = 0;\r\n  let key: statKeyType = \"\";\r\n\r\n  const replaceList = [\r\n    [\"⓪\", \"0\"],\r\n    [\"①\", \"1\"],\r\n    [\"②\", \"2\"],\r\n    [\"③\", \"3\"],\r\n    [\"④\", \"4\"],\r\n    [\"⑤\", \"5\"],\r\n    [\"⑥\", \"6\"],\r\n    [\"⑦\", \"7\"],\r\n    [\"⑧\", \"8\"],\r\n    [\"⑨\", \"9\"],\r\n  ];\r\n  key_ = key_.replaceAll(\" \", \"\").replaceAll(\"カ\", \"力\");\r\n  replaceList.forEach((replaceItem) => {\r\n    value_ = value_.replaceAll(replaceItem[0], replaceItem[1]);\r\n  });\r\n\r\n  if (lang === \"en\") {\r\n    statKey.forEach((key_i) => {\r\n      let sim = similarity(statDef[key_i as statKeyType].name[lang], key_);\r\n      if (sim > maxSim) {\r\n        key = key_i as statKeyType;\r\n        maxSim = sim;\r\n      }\r\n    });\r\n  } else {\r\n    str = str.replace(/\\s/g, \"\");\r\n    //some letter could be lost.\r\n    //use nearest!\r\n    statKey.forEach((key_i) => {\r\n      let sim = similarity(statDef[key_i as statKeyType].name[lang], key_);\r\n      if (sim > maxSim) {\r\n        key = key_i as statKeyType;\r\n        maxSim = sim;\r\n      }\r\n    });\r\n  }\r\n\r\n  statKey.forEach((key_) => {\r\n    let sim = similarity(statDef[key_ as statKeyType].name[lang], str);\r\n    if (sim > maxSim) {\r\n      key = key_ as statKeyType;\r\n      maxSim = sim;\r\n    }\r\n  });\r\n\r\n  let value = Number(value_);\r\n  if (isNaN(value)) {\r\n    console.log(\"NaN\", value_, key_, str);\r\n    value = 0;\r\n    maxSim = 0;\r\n  }\r\n  return { key, value, confidence: maxSim };\r\n};\r\n","import cv, { MinMaxLoc, Rect } from \"@techstark/opencv-js\";\r\nimport Tesseract, { createWorker } from \"tesseract.js\";\r\nimport { setKeyType, slotKeyType } from \"../consts/Artifact\";\r\nimport { statKeyType } from \"../consts/Stat\";\r\nimport { ArtifactType } from \"../types/Artifact\";\r\nimport { Language } from \"../types/Language\";\r\nimport { SubstatType } from \"../types/Substat\";\r\nimport { imshowTrimmed } from \"./opencv\";\r\nimport { isAlphabet } from \"./string\";\r\nimport { str2artifactSet, str2stat, str2stats } from \"./strToArtifact\";\r\nimport setChars from \"../consts/set-charlist.json\";\r\n\r\n//PROCESSED\r\nexport type ArtifactScanOut = {\r\n  setKey: ScanResSetKey;\r\n  rarity: ScanResNum;\r\n  level: ScanResNum;\r\n  slotKey: ScanResSlotKey;\r\n  mainStatKey: ScanResStatKey;\r\n  substats: ScanResStat[];\r\n  warning: string[];\r\n  error: string[];\r\n};\r\n\r\n//scale change sample size: larger precise, smaller faster\r\nexport type ArtifactScanStrOut = {\r\n  name: ScanRes;\r\n  slot: ScanRes;\r\n  mainKey: ScanRes;\r\n  mainValue: ScanRes;\r\n  star: ScanRes;\r\n  level: ScanRes;\r\n  substat: ScanRes;\r\n};\r\n\r\nexport const ScanRes2GOOD = (scanned: ArtifactScanOut): ArtifactType => {\r\n  return {\r\n    setKey: scanned.setKey.key,\r\n    rarity: scanned.rarity.value as 1 | 2 | 3 | 4 | 5,\r\n    level: scanned.level.value,\r\n    slotKey: scanned.slotKey.value,\r\n    mainStatKey: scanned.mainStatKey.key,\r\n    substats: scanned.substats.map((substat) => {\r\n      return { key: substat.key, value: substat.value } as SubstatType;\r\n    }),\r\n  };\r\n};\r\n\r\nexport const ArtifactScan = async (\r\n  src: cv.Mat,\r\n  scale: number,\r\n  left: cv.Mat,\r\n  right: cv.Mat,\r\n  mid: cv.Mat,\r\n  buf: React.RefObject<HTMLCanvasElement>,\r\n  worker?: Tesseract.Worker,\r\n  setProgress?: (value: number) => void\r\n) => {\r\n  let strs = await ArtifactScanStr(\r\n    src,\r\n    scale,\r\n    left,\r\n    right,\r\n    mid,\r\n    buf,\r\n    worker,\r\n    setProgress\r\n  );\r\n\r\n  console.log(strs);\r\n\r\n  let warning: string[] = [];\r\n  let error: string[] = [];\r\n\r\n  let lang: Language = isAlphabet(strs.name.value.charAt(0)) ? \"en\" : \"ja\";\r\n  let res = {} as ArtifactScanOut;\r\n  let set = str2artifactSet(strs.name.value, lang);\r\n  res.setKey = { key: set.key, confidence: set.confidence };\r\n  res.slotKey = { value: set.slot, confidence: set.confidence };\r\n  if (set.confidence < 0.6)\r\n    set.confidence > 0.4\r\n      ? warning.push(\"set\", \"slot\")\r\n      : error.push(\"set\", \"slot\");\r\n  res.rarity = {\r\n    value: strs.star.value.replace(/\\s/g, \"\").length,\r\n    confidence: strs.star.confidence,\r\n  };\r\n  if (strs.star.confidence < 0.5)\r\n    strs.star.confidence > 0.3 ? warning.push(\"star\") : error.push(\"star\");\r\n  //could compare with main stat and improve accuracy\r\n  res.level = {\r\n    value: Number(strs.level.value.replace(/^\\D+/g, \"\")),\r\n    confidence: strs.level.confidence,\r\n  };\r\n  if (strs.level.confidence < 0.8)\r\n    strs.level.confidence > 0.5 ? warning.push(\"level\") : error.push(\"level\");\r\n  let mainstat = str2stat(\r\n    strs.mainKey.value + \"+\" + strs.mainValue.value,\r\n    lang\r\n  );\r\n  res.mainStatKey = { key: mainstat.key, confidence: mainstat.confidence };\r\n  if (mainstat.confidence < 0.6)\r\n    mainstat.confidence > 0.3\r\n      ? warning.push(\"mainstat\")\r\n      : error.push(\"mainstat\");\r\n\r\n  res.substats = str2stats(strs.substat.value, lang);\r\n  res.substats.forEach((stat, i) => {\r\n    if (stat.confidence < 0.8)\r\n      stat.confidence > 0.5\r\n        ? warning.push(`substat${i}`)\r\n        : error.push(`substat${i}`);\r\n  });\r\n  res.warning = warning;\r\n  res.error = error;\r\n\r\n  return res;\r\n};\r\n\r\nexport const ArtifactScanStr = async (\r\n  src_: cv.Mat,\r\n  scale: number,\r\n  left: cv.Mat,\r\n  right: cv.Mat,\r\n  mid: cv.Mat,\r\n  buf: React.RefObject<HTMLCanvasElement>,\r\n  worker?: Tesseract.Worker,\r\n  setProgress?: (value: number) => void\r\n) => {\r\n  let time = performance.now();\r\n  setProgress && setProgress(0);\r\n  let src = new cv.Mat();\r\n  let small = new cv.Mat();\r\n  src_.copyTo(src);\r\n\r\n  let res = {} as ArtifactScanStrOut;\r\n\r\n  const resize = () => {\r\n    let aspect = src.size().width / src.size().height;\r\n    cv.resize(src, small, new cv.Size((720 / 2) * aspect, 720 / 2)); //* RESIZE FOR FASTER RES,\r\n    cv.resize(src, src, new cv.Size(720 * scale * aspect, 720 * scale)); //* RESIZE FOR FASTER RES,\r\n  };\r\n\r\n  let dst = new cv.Mat();\r\n  let mask = new cv.Mat();\r\n\r\n  const rightMatch = async () => {\r\n    cv.matchTemplate(small, right, dst, cv.TM_CCOEFF_NORMED, mask);\r\n    let result = cv.minMaxLoc(dst, mask) as any as MinMaxLoc;\r\n    return result.maxLoc.x + right.cols;\r\n  };\r\n  const leftMatch = async () => {\r\n    cv.matchTemplate(small, left, dst, cv.TM_CCOEFF_NORMED, mask);\r\n    let result = cv.minMaxLoc(dst, mask) as any as MinMaxLoc;\r\n    return result.maxLoc.x;\r\n  };\r\n\r\n  resize();\r\n  setProgress && setProgress(10);\r\n  // console.log(performance.now() - time, src.size());\r\n  // time = performance.now();\r\n\r\n  const [rightright, leftleft] = await Promise.all([rightMatch(), leftMatch()]);\r\n  setProgress && setProgress(30);\r\n  // console.log(performance.now() - time, \"left right match\");\r\n  // time = performance.now();\r\n\r\n  let slimRect = new cv.Rect(\r\n    leftleft * scale * 2,\r\n    0,\r\n    (rightright - leftleft) * scale * 2,\r\n    src.size().height\r\n  );\r\n  let slimImg = src.roi(slimRect);\r\n  //*RESIZE AFTER CLOP!!!!!!!!!\r\n  let aspect = slimImg.size().width / slimImg.size().height;\r\n\r\n  cv.resize(slimImg, slimImg, new cv.Size(352 * scale, (352 * scale) / aspect));\r\n\r\n  cv.matchTemplate(slimImg, mid, dst, cv.TM_CCOEFF, mask);\r\n  let result = cv.minMaxLoc(dst, mask) as any as MinMaxLoc;\r\n  let maxPoint = result.maxLoc;\r\n  let point = new cv.Point(maxPoint.x + mid.cols, maxPoint.y + mid.rows);\r\n  setProgress && setProgress(40);\r\n  // console.log(performance.now() - time, \"slimmed\");\r\n  // time = performance.now();\r\n\r\n  let midSeparator = maxPoint.y + mid.rows / 2;\r\n  let topHalfHeight = 189;\r\n  let topHalfBottom = 156;\r\n  let topHalfR = new cv.Rect(\r\n    12,\r\n    midSeparator - topHalfHeight * scale,\r\n    328 * scale,\r\n    (topHalfHeight + topHalfBottom) * scale\r\n  );\r\n  let trimmedImg = slimImg.roi(topHalfR);\r\n  cv.cvtColor(trimmedImg, trimmedImg, cv.COLOR_BGR2GRAY);\r\n  setProgress && setProgress(50);\r\n  // console.log(performance.now() - time, \"trimmed\");\r\n  // time = performance.now();\r\n\r\n  let name1p = new cv.Point(17 * scale, 2 * scale);\r\n  let name2p = new cv.Point((17 + 295) * scale, (2 + 34) * scale);\r\n  let part1p = new cv.Point(16 * scale, 46 * scale);\r\n  let part2p = new cv.Point((16 + 130) * scale, (46 + 18) * scale);\r\n  let mainKey1p = new cv.Point(16 * scale, 100 * scale);\r\n  let mainKey2p = new cv.Point((16 + 130) * scale, (100 + 18) * scale);\r\n  let mainValue1p = new cv.Point(16 * scale, 118 * scale);\r\n  let mainValue2p = new cv.Point((16 + 102) * scale, (118 + 32) * scale);\r\n  let star1p = new cv.Point(16 * scale, 156 * scale);\r\n  let star2p = new cv.Point((16 + 116) * scale, (156 + 24) * scale);\r\n  let level1p = new cv.Point(24 * scale, 208 * scale);\r\n  let level2p = new cv.Point((24 + 34) * scale, (208 + 16) * scale);\r\n  let substat1p = new cv.Point(32 * scale, 237 * scale);\r\n  let substat2p = new cv.Point((32 + 198) * scale, (237 + 106) * scale);\r\n\r\n  if (worker === undefined) {\r\n    worker = await createWorker(); //{logger: (m) => console.log(m), // Add logger here}\r\n    await worker.loadLanguage(\"eng+jpn\");\r\n    await worker.initialize(\"eng+jpn\");\r\n  }\r\n  setProgress && setProgress(60);\r\n  // console.log(performance.now() - time, \"worker initialized\");\r\n  // time = performance.now();\r\n\r\n  const fname = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 0.75, -180, name1p, name2p);\r\n    await worker!.setParameters({\r\n      tessedit_char_whitelist: setChars,\r\n    });\r\n    let result = await worker!.recognize(buf.current!.toDataURL()); //, \"jpn\"\r\n    await worker!.setParameters({\r\n      tessedit_char_whitelist: undefined,\r\n    });\r\n    res.name = { value: result.data.text, confidence: result.data.confidence };\r\n  };\r\n  const fslot = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 1, -180, part1p, part2p);\r\n    let result = await worker!.recognize(buf.current!.toDataURL()); //, \"jpn\"\r\n    res.slot = { value: result.data.text, confidence: result.data.confidence };\r\n  };\r\n\r\n  const fmainKey = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 1, -135, mainKey1p, mainKey2p);\r\n    let result = await worker!.recognize(buf.current!.toDataURL()); //, \"jpn\" //nograyscale\r\n    res.mainKey = {\r\n      value: result.data.text,\r\n      confidence: result.data.confidence,\r\n    };\r\n  };\r\n  const fmainValue = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 0.75, -180, mainValue1p, mainValue2p);\r\n    let result = await worker!.recognize(buf.current!.toDataURL());\r\n    res.mainValue = {\r\n      value: result.data.text,\r\n      confidence: result.data.confidence,\r\n    };\r\n  };\r\n\r\n  const fstar = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 1, -150, star1p, star2p);\r\n    let result = await worker!.recognize(buf.current!.toDataURL()); //, \"chi_tra\"\r\n    res.star = { value: result.data.text, confidence: result.data.confidence };\r\n  };\r\n\r\n  const flevel = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 1, -150, level1p, level2p);\r\n    await worker!.setParameters({\r\n      tessedit_char_whitelist: \"+0123456789\",\r\n    });\r\n    let result = await worker!.recognize(buf.current!.toDataURL()); //nograyscale\r\n    await worker!.setParameters({\r\n      tessedit_char_whitelist: undefined,\r\n    });\r\n    res.level = { value: result.data.text, confidence: result.data.confidence };\r\n  };\r\n\r\n  const fsubstat = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 1, 140, substat1p, substat2p);\r\n    let result = await worker!.recognize(buf.current!.toDataURL()); //, \"jpn\"\r\n    res.substat = {\r\n      value: result.data.text,\r\n      confidence: result.data.confidence,\r\n    };\r\n  };\r\n\r\n  // setProgress && setProgress(70);\r\n  //console.log(performance.now() - time, \"Start tesseract\");\r\n  // time = performance.now();\r\n  await fname();\r\n  await fslot();\r\n  await fmainKey();\r\n  await fmainValue();\r\n  await fstar();\r\n  await flevel();\r\n  await fsubstat();\r\n\r\n  //await worker.terminate();\r\n  setProgress && setProgress(100);\r\n  // console.log(performance.now() - time, \"end tesseract\");\r\n  // time = performance.now();\r\n  return res;\r\n};\r\n\r\nexport type ScanRes = {\r\n  value: string;\r\n  confidence: number;\r\n};\r\n\r\nexport type ScanResSlotKey = {\r\n  value: slotKeyType;\r\n  confidence: number;\r\n};\r\nexport type ScanResNum = {\r\n  value: number;\r\n  confidence: number;\r\n};\r\n\r\nexport type ScanResSetKey = {\r\n  key: setKeyType;\r\n  confidence: number;\r\n};\r\n\r\nexport type ScanResStat = {\r\n  key: statKeyType;\r\n  value: number;\r\n  confidence: number;\r\n};\r\n\r\nexport type ScanResStatKey = {\r\n  key: statKeyType;\r\n  confidence: number;\r\n};\r\n","import { faCamera } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Box, CircularProgress, LinearProgress, useTheme } from \"@mui/material\";\r\nimport cv, { Mat } from \"@techstark/opencv-js\";\r\nimport { useContext, useEffect, useCallback } from \"react\";\r\nimport Tesseract, { createWorker } from \"tesseract.js\";\r\nimport { Artifact } from \"../../utils/class/Artifact\";\r\nimport { EditorContext } from \"../../utils/contexts/EditorContext\";\r\nimport { IconTextButton } from \"./IconTextButton\";\r\nimport { useRef, useState } from \"react\";\r\nimport { imreadUrl } from \"../../utils/func/opencv\";\r\nimport { ArtifactScan, ScanRes2GOOD } from \"../../utils/func/artifactScan\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst AutoFillButton = () => {\r\n  let { editor } = useContext(EditorContext);\r\n  const dummyImgRef = useRef<HTMLCanvasElement>(null);\r\n  const [templateImgs, setTemplateImgs] = useState<Mat[] | undefined>();\r\n  const [worker, setWorker] = useState<Tesseract.Worker>();\r\n  const [imgSrc, setImgSrc] = useState(\"\");\r\n  const { t } = useTranslation([\"editor\", \"common\"]);\r\n\r\n  let scale = 1.5; //small faster large precise\r\n\r\n  const loadTemplate = async () => {\r\n    let i1 = await imreadUrl(\"template/right.png\");\r\n    cv.resize(i1, i1, new cv.Size(i1.size().width / 2, i1.size().height / 2));\r\n    let i2 = await imreadUrl(\"template/left.png\");\r\n    cv.resize(i2, i2, new cv.Size(i2.size().width / 2, i2.size().height / 2));\r\n    let i3 = await imreadUrl(\"template/mid.png\");\r\n    cv.resize(i3, i3, new cv.Size(i3.size().width / 2, i3.size().height / 2));\r\n    setTemplateImgs([i1, i2, i3]);\r\n    //console.log(\"SET IMAGE\");\r\n    return [i1, i2, i3];\r\n  };\r\n\r\n  const initWorker = async () => {\r\n    let worker = await createWorker(); //{logger: (m) => console.log(m), // Add logger here}\r\n    await worker.loadLanguage(\"eng+jpn\");\r\n    await worker.initialize(\"eng+jpn\");\r\n    setWorker(worker);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (templateImgs) return;\r\n    initWorker();\r\n    cv[\"onRuntimeInitialized\"] = async () => {\r\n      let templateImgs_ = await loadTemplate();\r\n      const pasteFunc = (e) => pasteImage(e.clipboardData.files, templateImgs_);\r\n      window.addEventListener(\"paste\", pasteFunc);\r\n      return () => {\r\n        window.removeEventListener(\"paste\", pasteFunc);\r\n      };\r\n    };\r\n  }, []);\r\n\r\n  const theme = useTheme();\r\n\r\n  const uploadImage = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    console.log(e.target.files);\r\n    if (\r\n      e.target.files === null ||\r\n      e.target.files.length === 0 ||\r\n      templateImgs === undefined\r\n    )\r\n      return;\r\n    setArtifactFromImage(e.target.files[0], templateImgs as Mat[]);\r\n    e.target.files = null;\r\n  };\r\n\r\n  const pasteImage = (files: Blob, templateImgs: Mat[]) => {\r\n    if (files === null || templateImgs === undefined) return;\r\n    setArtifactFromImage(files[0], templateImgs);\r\n  };\r\n\r\n  const setArtifactFromImage = async (file: Blob, templateImgs: Mat[]) => {\r\n    if (worker === undefined) await loadTemplate();\r\n    editor.setInfo({ sevarity: \"info\", text: t(\"common:info.loadStart\") });\r\n    let url = URL.createObjectURL(file);\r\n    setImgSrc(url);\r\n    //try {\r\n    //let path = URL.createObjectURL(file);\r\n    let i = await imreadUrl(url);\r\n    try {\r\n      let res = await ArtifactScan(\r\n        i,\r\n        scale,\r\n        templateImgs[1],\r\n        templateImgs[0],\r\n        templateImgs[2],\r\n        dummyImgRef,\r\n        worker\r\n      );\r\n      console.log(res);\r\n      console.log(res.warning, res.error);\r\n      let good = ScanRes2GOOD(res);\r\n      editor.setArtifact(good);\r\n      console.log(good);\r\n      if (res.warning.length === 0 && res.error.length === 0) {\r\n        editor.setInfo({\r\n          sevarity: \"success\",\r\n          text: t(\"common:info.loadSuccess\"),\r\n        });\r\n      } else {\r\n        editor.setInfo({\r\n          sevarity: \"warning\",\r\n          text: t(\"common:info.loadWarning\"),\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"CANNOT READ\", e);\r\n      editor.setInfo({ sevarity: \"error\", text: t(\"common:info.loadFailed\") });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"column\" gap={1}>\r\n      {worker !== undefined && templateImgs !== undefined ? (\r\n        <IconTextButton\r\n          text={t(\"editor.uploadScreenShot\")!}\r\n          icon={faCamera}\r\n          color={theme.palette.info.dark}\r\n        >\r\n          <input onChange={uploadImage} type=\"file\" accept=\"image/*\" hidden />\r\n          <canvas ref={dummyImgRef} style={{ display: \"none\" }} />\r\n        </IconTextButton>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n      {/* <img\r\n        style={{ padding: 16, maxHeight: 256, objectFit: \"contain\" }}\r\n        src={imgSrc}\r\n      /> */}\r\n    </Box>\r\n  );\r\n};\r\nexport default AutoFillButton;\r\n"],"names":["imreadUrl","url","loadImage","e","cv","target","src","Promise","resolve","reject","i","Image","onload","onerror","imshowTrimmed","ref","scale","threshold","p1","p2","roi","Rect","x","y","size","width","height","Math","abs","current","str2artifactSet","str","lang","maxSim","key_","slot_","replace","setKey","key","a","artifacts","slotKey","slot","undefined","sim","similarity","name","confidence","str2stats","strs","split","filter","str_","targets","length","includes","push","map","str2stat","value","datas","substring","value_","replaceAll","forEach","replaceItem","statKey","key_i","statDef","Number","isNaN","console","log","ArtifactScan","left","right","mid","buf","worker","setProgress","ArtifactScanStr","warning","error","isAlphabet","charAt","res","set","rarity","star","level","mainstat","mainKey","mainValue","mainStatKey","substats","substat","stat","src_","performance","now","small","copyTo","resize","aspect","dst","mask","rightMatch","result","maxLoc","cols","leftMatch","all","rightright","leftleft","slimRect","slimImg","maxPoint","rows","midSeparator","topHalfR","trimmedImg","name1p","name2p","part1p","part2p","mainKey1p","mainKey2p","mainValue1p","mainValue2p","star1p","star2p","level1p","level2p","substat1p","substat2p","createWorker","loadLanguage","initialize","fname","setParameters","tessedit_char_whitelist","recognize","toDataURL","data","text","fslot","fmainKey","fmainValue","fstar","flevel","fsubstat","editor","useContext","EditorContext","dummyImgRef","useRef","useState","templateImgs","setTemplateImgs","setWorker","setImgSrc","t","useTranslation","loadTemplate","i1","i2","i3","initWorker","useEffect","templateImgs_","pasteFunc","pasteImage","clipboardData","files","window","addEventListener","removeEventListener","theme","useTheme","uploadImage","setArtifactFromImage","file","setInfo","sevarity","URL","createObjectURL","good","scanned","setArtifact","Box","display","flexDirection","gap","IconTextButton","icon","faCamera","color","palette","info","dark","onChange","type","accept","hidden","style","CircularProgress"],"sourceRoot":""}