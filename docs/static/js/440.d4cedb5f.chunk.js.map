{"version":3,"file":"static/js/440.d4cedb5f.chunk.js","mappings":"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","sources":["utils/func/opencv.ts","utils/consts/Artifact.ts","utils/func/strToArtifact.ts","utils/func/artifactScan.ts","components/molecules/AutoFillButton.tsx"],"sourcesContent":["import cv, { Mat, Point, Rect } from \"@techstark/opencv-js\";\r\n\r\nexport const imreadUrl = async (url: string): Promise<Mat> => {\r\n  let e = await loadImage(url);\r\n  //console.log(e.target);\r\n  return cv.imread(e.target as HTMLElement);\r\n};\r\n\r\nexport const loadImage = (src: string): Promise<Event> => {\r\n  return new Promise((resolve, reject) => {\r\n    const i = new Image();\r\n    i.onload = (e) => resolve(e);\r\n    i.onerror = (e) => reject(e);\r\n    i.src = src;\r\n  });\r\n};\r\n\r\nexport const imshowTrimmed = (\r\n  ref: React.RefObject<HTMLCanvasElement>,\r\n  src: Mat,\r\n  scale: number,\r\n  threshold: number,\r\n  p1: Point,\r\n  p2: Point\r\n) => {\r\n  let i = src.roi(new Rect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y));\r\n  cv.resize(i, i, new cv.Size(i.size().width * scale, i.size().height * scale));\r\n  cv.threshold(\r\n    i,\r\n    i,\r\n    Math.abs(threshold),\r\n    255,\r\n    threshold >= 0 ? cv.THRESH_BINARY : cv.THRESH_BINARY_INV\r\n  );\r\n  cv.imshow(ref.current!, i);\r\n};\r\n","export const setKey = [\r\n  \"Adventurer\", //Adventurer\r\n  \"ArchaicPetra\", //Archaic Petra\r\n  \"Berserker\", //Berserker\r\n  \"BlizzardStrayer\", //Blizzard Strayer\r\n  \"BloodstainedChivalry\", //Bloodstained Chivalry\r\n  \"BraveHeart\", //Brave Heart\r\n  \"CrimsonWitchOfFlames\", //Crimson Witch of Flames\r\n  \"DeepwoodMemories\", //Deepwood Memories\r\n  \"DefendersWill\", //Defender's Will\r\n  \"DesertPavilionChronicle\", //Desert Pavilion Chronicle\r\n  \"EchoesOfAnOffering\", //Echoes of an Offering\r\n  \"EmblemOfSeveredFate\", //Emblem of Severed Fate\r\n  \"FlowerOfParadiseLost\", //Flower of Paradise Lost\r\n  \"Gambler\", //Gambler\r\n  \"GildedDreams\", //Gilded Dreams\r\n  \"GladiatorsFinale\", //Gladiator's Finale\r\n  \"HeartOfDepth\", //Heart of Depth\r\n  \"HuskOfOpulentDreams\", //Husk of Opulent Dreams\r\n  \"Instructor\", //Instructor\r\n  \"Lavawalker\", //Lavawalker\r\n  \"LuckyDog\", //Lucky Dog\r\n  \"MaidenBeloved\", //Maiden Beloved\r\n  \"MartialArtist\", //Martial Artist\r\n  \"NoblesseOblige\", //Noblesse Oblige\r\n  \"OceanHuedClam\", //Ocean-Hued Clam\r\n  \"PaleFlame\", //Pale Flame\r\n  \"PrayersForDestiny\", //Prayers for Destiny\r\n  \"PrayersForIllumination\", //Prayers for Illumination\r\n  \"PrayersForWisdom\", //Prayers for Wisdom\r\n  \"PrayersToSpringtime\", //Prayers to Springtime\r\n  \"ResolutionOfSojourner\", //Resolution of Sojourner\r\n  \"RetracingBolide\", //Retracing Bolide\r\n  \"Scholar\", //Scholar\r\n  \"ShimenawasReminiscence\", //Shimenawa's Reminiscence\r\n  \"TenacityOfTheMillelith\", //Tenacity of the Millelith\r\n  \"TheExile\", //The Exile\r\n  \"ThunderingFury\", //Thundering Fury\r\n  \"Thundersoother\", //Thundersoother\r\n  \"TinyMiracle\", //Tiny Miracle\r\n  \"TravelingDoctor\", //Traveling Doctor\r\n  \"VermillionHereafter\", //Vermillion Hereafter\r\n  \"ViridescentVenerer\", //Viridescent Venerer\r\n  \"WanderersTroupe\",\r\n] as const;\r\nexport type setKeyType = typeof setKey[number];\r\n\r\nexport const slotKey = [\r\n  \"flower\",\r\n  \"plume\",\r\n  \"sands\",\r\n  \"goblet\",\r\n  \"circlet\",\r\n] as const;\r\nexport type slotKeyType = typeof slotKey[number];\r\n\r\n//Wanderer's Troupe\r\n//   Adventurer: { name: { en: \"Adventurer\", ja: \"\" } },\r\n//   ArchaicPetra: { name: { en: \"Archaic Petra\", ja: \"\" } },\r\n//   Berserker: { name: { en: \"Berserker\", ja: \"\" } },\r\n//   BlizzardStrayer: { name: { en: \"Blizzard Strayer\", ja: \"\" } },\r\n//   BloodstainedChivalry: { name: { en: \"Bloodstained Chivalry\", ja: \"\" } },\r\n//   BraveHeart: { name: { en: \"Brave Heart\", ja: \"\" } },\r\n//   CrimsonWitchOfFlames: { name: { en: \"Crimson Witch of Flames\", ja: \"\" } },\r\n//   DeepwoodMemories: { name: { en: \"Deepwood Memories\", ja: \"\" } },\r\n//   DefendersWill: { name: { en: \"Defender's Will\", ja: \"\" } },\r\n//   DesertPavilionChronicle: {\r\n//     name: { en: \"Desert Pavilion Chronicle\", ja: \"\" },\r\n//   },\r\n//   EchoesOfAnOffering: { name: { en: \"Echoes of an Offering\", ja: \"\" } },\r\n//   EmblemOfSeveredFate: { name: { en: \"Emblem of Severed Fate\", ja: \"\" } },\r\n//   FlowerOfParadiseLost: { name: { en: \"Flower of Paradise Lost\", ja: \"\" } },\r\n//   Gambler: { name: { en: \"Gambler\", ja: \"\" } },\r\n//   GildedDreams: { name: { en: \"Gilded Dreams\", ja: \"\" } },\r\n//   GladiatorsFinale: { name: { en: \"Gladiator's Finale\", ja: \"\" } },\r\n//   HeartOfDepth: { name: { en: \"Heart of Depth\", ja: \"\" } },\r\n//   HuskOfOpulentDreams: { name: { en: \"Husk of Opulent Dreams\", ja: \"\" } },\r\n//   Instructor: { name: { en: \"Instructor\", ja: \"\" } },\r\n//   Lavawalker: { name: { en: \"Lavawalker\", ja: \"\" } },\r\n//   LuckyDog: { name: { en: \"Lucky Dog\", ja: \"\" } },\r\n//   MaidenBeloved: { name: { en: \"Maiden Beloved\", ja: \"\" } },\r\n//   MartialArtist: { name: { en: \"Martial Artist\", ja: \"\" } },\r\n//   NoblesseOblige: { name: { en: \"Noblesse Oblige\", ja: \"\" } },\r\n//   OceanHuedClam: { name: { en: \"Ocean-Hued Clam\", ja: \"\" } },\r\n//   PaleFlame: { name: { en: \"Pale Flame\", ja: \"\" } },\r\n//   PrayersForDestiny: { name: { en: \"Prayers for Destiny\", ja: \"\" } },\r\n//   PrayersForIllumination: { name: { en: \"Prayers for Illumination\", ja: \"\" } },\r\n//   PrayersForWisdom: { name: { en: \"Prayers for Wisdom\", ja: \"\" } },\r\n//   PrayersToSpringtime: { name: { en: \"Prayers to Springtime\", ja: \"\" } },\r\n//   ResolutionOfSojourner: { name: { en: \"Resolution of Sojourner\", ja: \"\" } },\r\n//   RetracingBolide: { name: { en: \"Retracing Bolide\", ja: \"\" } },\r\n//   Scholar: { name: { en: \"Scholar\", ja: \"\" } },\r\n//   ShimenawasReminiscence: { name: { en: \"Shimenawa's Reminiscence\", ja: \"\" } },\r\n//   TenacityOfTheMillelith: { name: { en: \"Tenacity of the Millelith\", ja: \"\" } },\r\n//   TheExile: { name: { en: \"The Exile\", ja: \"\" } },\r\n//   ThunderingFury: { name: { en: \"Thundering Fury\", ja: \"\" } },\r\n//   Thundersoother: { name: { en: \"Thundersoother\", ja: \"\" } },\r\n//   TinyMiracle: { name: { en: \"Tiny Miracle\", ja: \"\" } },\r\n//   TravelingDoctor: { name: { en: \"Traveling Doctor\", ja: \"\" } },\r\n//   VermillionHereafter: { name: { en: \"Vermillion Hereafter\", ja: \"\" } },\r\n//   ViridescentVenerer: { name: { en: \"Viridescent Venerer\", ja: \"\" } },\r\n//   WanderersTroupe: { name: { en: \"Wanderer's Troupe\", ja: \"\" } },\r\n// };\r\n","import { setKey, setKeyType, slotKey, slotKeyType } from \"../consts/Artifact\";\r\nimport { similarity } from \"./string\";\r\nimport artifacts from \"../consts/genshindb-partial.json\";\r\nimport { statDef, statKey, statKeyType } from \"../consts/Stat\";\r\nimport { Language } from \"../types/Language\";\r\nimport { ArtifactDB } from \"../types/Artifact\";\r\n\r\nexport type str2artifactSetOut = {\r\n  key: setKeyType;\r\n  slot: slotKeyType;\r\n  confidence: number;\r\n};\r\n\r\nexport const str2artifactSet = (\r\n  str: string,\r\n  lang: Language\r\n): str2artifactSetOut => {\r\n  let maxSim = 0;\r\n  let key_: setKeyType = \"Adventurer\";\r\n  let slot_: slotKeyType = \"circlet\";\r\n  if (lang === \"ja\") str = str.replace(/\\s/g, \"\");\r\n\r\n  setKey.forEach((key) => {\r\n    // let a = artifacts(key, {\r\n    //   resultLanguage: lang,\r\n    // })!;\r\n    let a = artifacts[key] as ArtifactDB;\r\n    slotKey.forEach((slot) => {\r\n      if (a[slot] !== undefined) {\r\n        let sim = similarity(str, a[slot]!.name[lang]);\r\n        if (sim > maxSim) {\r\n          key_ = key;\r\n          slot_ = slot;\r\n          maxSim = sim;\r\n        }\r\n      }\r\n    });\r\n  });\r\n  return { key: key_, slot: slot_, confidence: maxSim };\r\n};\r\n\r\nexport type str2statOut = {\r\n  key: statKeyType;\r\n  value: number;\r\n  confidence: number;\r\n};\r\n\r\nexport const str2stats = (str: string, lang: Language): str2statOut[] => {\r\n  var strs = str.split(\"\\n\");\r\n  strs = strs.filter((str_) => str_ !== \"\");\r\n  var targets: string[] = [];\r\n  for (let i = 0; i < strs.length; i++) {\r\n    let str_ = strs[i];\r\n    if (\r\n      str_.replace(/\\s/g, \"\").includes(\"Set\") ||\r\n      str_.replace(/\\s/g, \"\").includes(\"セット\")\r\n    ) {\r\n      break;\r\n    }\r\n    targets.push(str_);\r\n  }\r\n  for (let i = 0; i < 4; i++) {\r\n    if (targets[i] === undefined) targets[i] = \"\";\r\n  }\r\n  return targets.map((str) => str2stat(str, lang));\r\n};\r\n\r\nexport const str2stat = (str: string, lang: Language): str2statOut => {\r\n  if (str === \"\") return { key: \"ERR\", value: 0, confidence: 1 };\r\n  let datas = str.split(\"+\"); //plus could be lost\r\n  if (datas.length === 1) {\r\n    //console.log(\"+ error\");\r\n    //could be plus detection ERROR\r\n    for (let i = 0; i < datas[0].length; i++) {\r\n      if (\"⓪①②③④⑤⑥⑦⑧⑨0123456789\".includes(datas[0][i])) {\r\n        datas[1] = datas[0].substring(i);\r\n        datas[0] = datas[0].substring(0, i);\r\n        //console.log(`split at ${i} ${datas[0]} ${datas[1]}`);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  let key_ = datas[0] + (str.includes(\"%\") ? \"%\" : \"\");\r\n  var value_ = str.includes(\"%\") ? datas[1].split(\"%\")[0] : datas[1]; //10% => 10\r\n  let maxSim = 0;\r\n  let key: statKeyType = \"ERR\";\r\n\r\n  const replaceList = [\r\n    [\"⓪\", \"0\"],\r\n    [\"①\", \"1\"],\r\n    [\"②\", \"2\"],\r\n    [\"③\", \"3\"],\r\n    [\"④\", \"4\"],\r\n    [\"⑤\", \"5\"],\r\n    [\"⑥\", \"6\"],\r\n    [\"⑦\", \"7\"],\r\n    [\"⑧\", \"8\"],\r\n    [\"⑨\", \"9\"],\r\n  ];\r\n  key_ = key_.replaceAll(\" \", \"\").replaceAll(\"カ\", \"力\");\r\n  replaceList.forEach((replaceItem) => {\r\n    value_ = value_.replaceAll(replaceItem[0], replaceItem[1]);\r\n  });\r\n\r\n  if (lang === \"en\") {\r\n    statKey.forEach((key_i) => {\r\n      let sim = similarity(statDef[key_i as statKeyType].name[lang], key_);\r\n      if (sim > maxSim) {\r\n        key = key_i as statKeyType;\r\n        maxSim = sim;\r\n      }\r\n    });\r\n  } else {\r\n    str = str.replace(/\\s/g, \"\");\r\n    //some letter could be lost.\r\n    //use nearest!\r\n    statKey.forEach((key_i) => {\r\n      let sim = similarity(statDef[key_i as statKeyType].name[lang], key_);\r\n      if (sim > maxSim) {\r\n        key = key_i as statKeyType;\r\n        maxSim = sim;\r\n      }\r\n    });\r\n  }\r\n  let value = Number(value_);\r\n\r\n  //console.log(key_, value_, value, key);\r\n\r\n  statKey.forEach((key_) => {\r\n    let sim = similarity(statDef[key_ as statKeyType].name[lang], str);\r\n    if (sim > maxSim) {\r\n      key = key_ as statKeyType;\r\n      maxSim = sim;\r\n    }\r\n  });\r\n  return { key, value, confidence: maxSim };\r\n};\r\n","import cv, { MinMaxLoc, Rect } from \"@techstark/opencv-js\";\r\nimport Tesseract, { createWorker } from \"tesseract.js\";\r\nimport { setKeyType, slotKeyType } from \"../consts/Artifact\";\r\nimport { statKeyType } from \"../consts/Stat\";\r\nimport { ArtifactType } from \"../types/Artifact\";\r\nimport { Language } from \"../types/Language\";\r\nimport { SubstatType } from \"../types/Substat\";\r\nimport { imshowTrimmed } from \"./opencv\";\r\nimport { isAlphabet } from \"./string\";\r\nimport { str2artifactSet, str2stat, str2stats } from \"./strToArtifact\";\r\nimport setChars from \"../consts/set-charlist.json\";\r\n\r\n//PROCESSED\r\nexport type ArtifactScanOut = {\r\n  setKey: ScanResSetKey;\r\n  rarity: ScanResNum;\r\n  level: ScanResNum;\r\n  slotKey: ScanResSlotKey;\r\n  mainstatKey: ScanResStatKey;\r\n  substats: ScanResStat[];\r\n  warning: string[];\r\n  error: string[];\r\n};\r\n\r\n//scale change sample size: larger precise, smaller faster\r\nexport type ArtifactScanStrOut = {\r\n  name: ScanRes;\r\n  slot: ScanRes;\r\n  mainKey: ScanRes;\r\n  mainValue: ScanRes;\r\n  star: ScanRes;\r\n  level: ScanRes;\r\n  substat: ScanRes;\r\n};\r\n\r\nexport const ScanRes2GOOD = (scanned: ArtifactScanOut) => {\r\n  return {\r\n    setKey: scanned.setKey.key,\r\n    rarity: scanned.rarity.value,\r\n    level: scanned.level.value,\r\n    slotKey: scanned.slotKey.value,\r\n    mainstatKey: scanned.mainstatKey.key,\r\n    substats: scanned.substats.map((substat) => {\r\n      return { key: substat.key, value: substat.value } as SubstatType;\r\n    }),\r\n  } as ArtifactType;\r\n};\r\n\r\nexport const ArtifactScan = async (\r\n  src: cv.Mat,\r\n  scale: number,\r\n  left: cv.Mat,\r\n  right: cv.Mat,\r\n  mid: cv.Mat,\r\n  buf: React.RefObject<HTMLCanvasElement>,\r\n  worker?: Tesseract.Worker,\r\n  setProgress?: (value: number) => void\r\n) => {\r\n  let strs = await ArtifactScanStr(\r\n    src,\r\n    scale,\r\n    left,\r\n    right,\r\n    mid,\r\n    buf,\r\n    worker,\r\n    setProgress\r\n  );\r\n\r\n  console.log(strs);\r\n\r\n  let warning: string[] = [];\r\n  let error: string[] = [];\r\n\r\n  let lang: Language = isAlphabet(strs.name.value.charAt(0)) ? \"en\" : \"ja\";\r\n  let res = {} as ArtifactScanOut;\r\n  let set = str2artifactSet(strs.name.value, lang);\r\n  res.setKey = { key: set.key, confidence: set.confidence };\r\n  res.slotKey = { value: set.slot, confidence: set.confidence };\r\n  if (set.confidence < 0.6)\r\n    set.confidence > 0.4\r\n      ? warning.push(\"set\", \"slot\")\r\n      : error.push(\"set\", \"slot\");\r\n  res.rarity = {\r\n    value: strs.star.value.replace(/\\s/g, \"\").length,\r\n    confidence: strs.star.confidence,\r\n  };\r\n  if (strs.star.confidence < 0.5)\r\n    strs.star.confidence > 0.3 ? warning.push(\"star\") : error.push(\"star\");\r\n  //could compare with main stat and improve accuracy\r\n  res.level = {\r\n    value: Number(strs.level.value.replace(/^\\D+/g, \"\")),\r\n    confidence: strs.level.confidence,\r\n  };\r\n  if (strs.level.confidence < 0.8)\r\n    strs.level.confidence > 0.5 ? warning.push(\"level\") : error.push(\"level\");\r\n  let mainstat = str2stat(\r\n    strs.mainKey.value + \"+\" + strs.mainValue.value,\r\n    lang\r\n  );\r\n  res.mainstatKey = { key: mainstat.key, confidence: mainstat.confidence };\r\n  if (mainstat.confidence < 0.6)\r\n    mainstat.confidence > 0.3\r\n      ? warning.push(\"mainstat\")\r\n      : error.push(\"mainstat\");\r\n\r\n  res.substats = str2stats(strs.substat.value, lang);\r\n  res.substats.forEach((stat, i) => {\r\n    if (stat.confidence < 0.8)\r\n      stat.confidence > 0.5\r\n        ? warning.push(`substat${i}`)\r\n        : error.push(`substat${i}`);\r\n  });\r\n  res.warning = warning;\r\n  res.error = error;\r\n\r\n  return res;\r\n};\r\n\r\nexport const ArtifactScanStr = async (\r\n  src_: cv.Mat,\r\n  scale: number,\r\n  left: cv.Mat,\r\n  right: cv.Mat,\r\n  mid: cv.Mat,\r\n  buf: React.RefObject<HTMLCanvasElement>,\r\n  worker?: Tesseract.Worker,\r\n  setProgress?: (value: number) => void\r\n) => {\r\n  let time = performance.now();\r\n  setProgress && setProgress(0);\r\n  let src = new cv.Mat();\r\n  let small = new cv.Mat();\r\n  src_.copyTo(src);\r\n\r\n  let res = {} as ArtifactScanStrOut;\r\n\r\n  const resize = () => {\r\n    let aspect = src.size().width / src.size().height;\r\n    cv.resize(src, small, new cv.Size((720 / 2) * aspect, 720 / 2)); //* RESIZE FOR FASTER RES,\r\n    cv.resize(src, src, new cv.Size(720 * scale * aspect, 720 * scale)); //* RESIZE FOR FASTER RES,\r\n  };\r\n\r\n  let dst = new cv.Mat();\r\n  let mask = new cv.Mat();\r\n\r\n  const rightMatch = async () => {\r\n    cv.matchTemplate(small, right, dst, cv.TM_CCOEFF_NORMED, mask);\r\n    let result = cv.minMaxLoc(dst, mask) as any as MinMaxLoc;\r\n    return result.maxLoc.x + right.cols;\r\n  };\r\n  const leftMatch = async () => {\r\n    cv.matchTemplate(small, left, dst, cv.TM_CCOEFF_NORMED, mask);\r\n    let result = cv.minMaxLoc(dst, mask) as any as MinMaxLoc;\r\n    return result.maxLoc.x;\r\n  };\r\n\r\n  resize();\r\n  setProgress && setProgress(10);\r\n  // console.log(performance.now() - time, src.size());\r\n  // time = performance.now();\r\n\r\n  const [rightright, leftleft] = await Promise.all([rightMatch(), leftMatch()]);\r\n  setProgress && setProgress(30);\r\n  // console.log(performance.now() - time, \"left right match\");\r\n  // time = performance.now();\r\n\r\n  let slimRect = new cv.Rect(\r\n    leftleft * scale * 2,\r\n    0,\r\n    (rightright - leftleft) * scale * 2,\r\n    src.size().height\r\n  );\r\n  let slimImg = src.roi(slimRect);\r\n  //*RESIZE AFTER CLOP!!!!!!!!!\r\n  let aspect = slimImg.size().width / slimImg.size().height;\r\n\r\n  cv.resize(slimImg, slimImg, new cv.Size(352 * scale, (352 * scale) / aspect));\r\n\r\n  cv.matchTemplate(slimImg, mid, dst, cv.TM_CCOEFF, mask);\r\n  let result = cv.minMaxLoc(dst, mask) as any as MinMaxLoc;\r\n  let maxPoint = result.maxLoc;\r\n  let point = new cv.Point(maxPoint.x + mid.cols, maxPoint.y + mid.rows);\r\n  setProgress && setProgress(40);\r\n  // console.log(performance.now() - time, \"slimmed\");\r\n  // time = performance.now();\r\n\r\n  let midSeparator = maxPoint.y + mid.rows / 2;\r\n  let topHalfHeight = 189;\r\n  let topHalfBottom = 156;\r\n  let topHalfR = new cv.Rect(\r\n    12,\r\n    midSeparator - topHalfHeight * scale,\r\n    328 * scale,\r\n    (topHalfHeight + topHalfBottom) * scale\r\n  );\r\n  let trimmedImg = slimImg.roi(topHalfR);\r\n  cv.cvtColor(trimmedImg, trimmedImg, cv.COLOR_BGR2GRAY);\r\n  setProgress && setProgress(50);\r\n  // console.log(performance.now() - time, \"trimmed\");\r\n  // time = performance.now();\r\n\r\n  let name1p = new cv.Point(17 * scale, 2 * scale);\r\n  let name2p = new cv.Point((17 + 295) * scale, (2 + 34) * scale);\r\n  let part1p = new cv.Point(16 * scale, 46 * scale);\r\n  let part2p = new cv.Point((16 + 130) * scale, (46 + 18) * scale);\r\n  let mainKey1p = new cv.Point(16 * scale, 100 * scale);\r\n  let mainKey2p = new cv.Point((16 + 130) * scale, (100 + 18) * scale);\r\n  let mainValue1p = new cv.Point(16 * scale, 118 * scale);\r\n  let mainValue2p = new cv.Point((16 + 102) * scale, (118 + 32) * scale);\r\n  let star1p = new cv.Point(16 * scale, 156 * scale);\r\n  let star2p = new cv.Point((16 + 116) * scale, (156 + 24) * scale);\r\n  let level1p = new cv.Point(24 * scale, 208 * scale);\r\n  let level2p = new cv.Point((24 + 34) * scale, (208 + 16) * scale);\r\n  let substat1p = new cv.Point(32 * scale, 237 * scale);\r\n  let substat2p = new cv.Point((32 + 198) * scale, (237 + 106) * scale);\r\n\r\n  if (worker === undefined) {\r\n    worker = await createWorker(); //{logger: (m) => console.log(m), // Add logger here}\r\n    await worker.loadLanguage(\"eng+jpn\");\r\n    await worker.initialize(\"eng+jpn\");\r\n  }\r\n  setProgress && setProgress(60);\r\n  // console.log(performance.now() - time, \"worker initialized\");\r\n  // time = performance.now();\r\n\r\n  const fname = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 0.75, -180, name1p, name2p);\r\n    await worker!.setParameters({\r\n      tessedit_char_whitelist: setChars,\r\n    });\r\n    let result = await worker!.recognize(buf.current!.toDataURL()); //, \"jpn\"\r\n    await worker!.setParameters({\r\n      tessedit_char_whitelist: undefined,\r\n    });\r\n    res.name = { value: result.data.text, confidence: result.data.confidence };\r\n  };\r\n  const fslot = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 1, -180, part1p, part2p);\r\n    let result = await worker!.recognize(buf.current!.toDataURL()); //, \"jpn\"\r\n    res.slot = { value: result.data.text, confidence: result.data.confidence };\r\n  };\r\n\r\n  const fmainKey = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 1, -135, mainKey1p, mainKey2p);\r\n    let result = await worker!.recognize(buf.current!.toDataURL()); //, \"jpn\" //nograyscale\r\n    res.mainKey = {\r\n      value: result.data.text,\r\n      confidence: result.data.confidence,\r\n    };\r\n  };\r\n  const fmainValue = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 0.75, -180, mainValue1p, mainValue2p);\r\n    let result = await worker!.recognize(buf.current!.toDataURL());\r\n    res.mainValue = {\r\n      value: result.data.text,\r\n      confidence: result.data.confidence,\r\n    };\r\n  };\r\n\r\n  const fstar = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 1, -150, star1p, star2p);\r\n    let result = await worker!.recognize(buf.current!.toDataURL()); //, \"chi_tra\"\r\n    res.star = { value: result.data.text, confidence: result.data.confidence };\r\n  };\r\n\r\n  const flevel = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 1, -150, level1p, level2p);\r\n    await worker!.setParameters({\r\n      tessedit_char_whitelist: \"+0123456789\",\r\n    });\r\n    let result = await worker!.recognize(buf.current!.toDataURL()); //nograyscale\r\n    await worker!.setParameters({\r\n      tessedit_char_whitelist: undefined,\r\n    });\r\n    res.level = { value: result.data.text, confidence: result.data.confidence };\r\n  };\r\n\r\n  const fsubstat = async () => {\r\n    imshowTrimmed(buf, trimmedImg, 1, 140, substat1p, substat2p);\r\n    let result = await worker!.recognize(buf.current!.toDataURL()); //, \"jpn\"\r\n    res.substat = {\r\n      value: result.data.text,\r\n      confidence: result.data.confidence,\r\n    };\r\n  };\r\n\r\n  // setProgress && setProgress(70);\r\n  //console.log(performance.now() - time, \"Start tesseract\");\r\n  // time = performance.now();\r\n  await fname();\r\n  await fslot();\r\n  await fmainKey();\r\n  await fmainValue();\r\n  await fstar();\r\n  await flevel();\r\n  await fsubstat();\r\n\r\n  //await worker.terminate();\r\n  setProgress && setProgress(100);\r\n  // console.log(performance.now() - time, \"end tesseract\");\r\n  // time = performance.now();\r\n  return res;\r\n};\r\n\r\nexport type ScanRes = {\r\n  value: string;\r\n  confidence: number;\r\n};\r\n\r\nexport type ScanResSlotKey = {\r\n  value: slotKeyType;\r\n  confidence: number;\r\n};\r\nexport type ScanResNum = {\r\n  value: number;\r\n  confidence: number;\r\n};\r\n\r\nexport type ScanResSetKey = {\r\n  key: setKeyType;\r\n  confidence: number;\r\n};\r\n\r\nexport type ScanResStat = {\r\n  key: statKeyType;\r\n  value: number;\r\n  confidence: number;\r\n};\r\n\r\nexport type ScanResStatKey = {\r\n  key: statKeyType;\r\n  confidence: number;\r\n};\r\n","import { faCamera } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Box, LinearProgress, useTheme } from \"@mui/material\";\r\nimport cv, { Mat } from \"@techstark/opencv-js\";\r\nimport { useContext, useEffect, useCallback } from \"react\";\r\nimport Tesseract, { createWorker } from \"tesseract.js\";\r\nimport { Artifact } from \"../../utils/class/Artifact\";\r\nimport { EditorContext } from \"../../utils/contexts/EditorContext\";\r\nimport { IconTextButton } from \"./IconTextButton\";\r\nimport { useRef, useState } from \"react\";\r\nimport { imreadUrl } from \"../../utils/func/opencv\";\r\nimport { ArtifactScan, ScanRes2GOOD } from \"../../utils/func/artifactScan\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst AutoFillButton = () => {\r\n  let { editor } = useContext(EditorContext);\r\n  const dummyImgRef = useRef<HTMLCanvasElement>(null);\r\n  const [templateImgs, setTemplateImgs] = useState<Mat[] | undefined>();\r\n  const [worker, setWorker] = useState<Tesseract.Worker>();\r\n  const [imgSrc, setImgSrc] = useState(\"\");\r\n  const { t } = useTranslation([\"editor\", \"common\"]);\r\n\r\n  let scale = 1.5; //small faster large precise\r\n\r\n  const loadTemplate = async () => {\r\n    let i1 = await imreadUrl(\"template/right.png\");\r\n    cv.resize(i1, i1, new cv.Size(i1.size().width / 2, i1.size().height / 2));\r\n    let i2 = await imreadUrl(\"template/left.png\");\r\n    cv.resize(i2, i2, new cv.Size(i2.size().width / 2, i2.size().height / 2));\r\n    let i3 = await imreadUrl(\"template/mid.png\");\r\n    cv.resize(i3, i3, new cv.Size(i3.size().width / 2, i3.size().height / 2));\r\n    setTemplateImgs([i1, i2, i3]);\r\n    //console.log(\"SET IMAGE\");\r\n    return [i1, i2, i3];\r\n  };\r\n\r\n  const initWorker = async () => {\r\n    let worker = await createWorker(); //{logger: (m) => console.log(m), // Add logger here}\r\n    await worker.loadLanguage(\"eng+jpn\");\r\n    await worker.initialize(\"eng+jpn\");\r\n    setWorker(worker);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (templateImgs) return;\r\n    initWorker();\r\n    cv[\"onRuntimeInitialized\"] = async () => {\r\n      let templateImgs_ = await loadTemplate();\r\n      const pasteFunc = (e) => pasteImage(e.clipboardData.files, templateImgs_);\r\n      window.addEventListener(\"paste\", pasteFunc);\r\n      return () => {\r\n        window.removeEventListener(\"paste\", pasteFunc);\r\n      };\r\n    };\r\n  }, []);\r\n\r\n  const theme = useTheme();\r\n\r\n  const uploadImage = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    console.log(e.target.files);\r\n    if (\r\n      e.target.files === null ||\r\n      e.target.files.length === 0 ||\r\n      templateImgs === undefined\r\n    )\r\n      return;\r\n    setArtifactFromImage(e.target.files[0], templateImgs as Mat[]);\r\n    e.target.files = null;\r\n  };\r\n\r\n  const pasteImage = (files: Blob, templateImgs: Mat[]) => {\r\n    if (files === null || templateImgs === undefined) return;\r\n    setArtifactFromImage(files[0], templateImgs);\r\n  };\r\n\r\n  const setArtifactFromImage = async (file: Blob, templateImgs: Mat[]) => {\r\n    if (worker === undefined) await loadTemplate();\r\n    editor.setInfo({ sevarity: \"info\", text: t(\"common:info.loadStart\") });\r\n    let url = URL.createObjectURL(file);\r\n    setImgSrc(url);\r\n    //try {\r\n    //let path = URL.createObjectURL(file);\r\n    let i = await imreadUrl(url);\r\n    try {\r\n      let res = await ArtifactScan(\r\n        i,\r\n        scale,\r\n        templateImgs[1],\r\n        templateImgs[0],\r\n        templateImgs[2],\r\n        dummyImgRef,\r\n        worker\r\n      );\r\n      console.log(res);\r\n      console.log(res.warning, res.error);\r\n      let good = ScanRes2GOOD(res);\r\n      editor.setArtifact(good);\r\n      console.log(good);\r\n      if (res.warning.length === 0 && res.error.length === 0) {\r\n        editor.setInfo({\r\n          sevarity: \"success\",\r\n          text: t(\"common:info.loadSuccess\"),\r\n        });\r\n      } else {\r\n        editor.setInfo({\r\n          sevarity: \"warning\",\r\n          text: t(\"common:info.loadWarning\"),\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"CANNOT READ\", e);\r\n      editor.setInfo({ sevarity: \"error\", text: t(\"common:info.loadFailed\") });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"column\" gap={1}>\r\n      <IconTextButton\r\n        text={t(\"editor.uploadScreenShot\")!}\r\n        icon={faCamera}\r\n        color={theme.palette.info.dark}\r\n      >\r\n        <input onChange={uploadImage} type=\"file\" accept=\"image/*\" hidden />\r\n        <canvas ref={dummyImgRef} style={{ display: \"none\" }} />\r\n      </IconTextButton>\r\n      {/* <img\r\n        style={{ padding: 16, maxHeight: 256, objectFit: \"contain\" }}\r\n        src={imgSrc}\r\n      /> */}\r\n    </Box>\r\n  );\r\n};\r\nexport default AutoFillButton;\r\n"],"names":["imreadUrl","url","loadImage","e","cv","target","src","Promise","resolve","reject","i","Image","onload","onerror","imshowTrimmed","ref","scale","threshold","p1","p2","roi","Rect","x","y","size","width","height","Math","abs","current","setKey","slotKey","str2artifactSet","str","lang","maxSim","key_","slot_","replace","forEach","key","a","artifacts","slot","undefined","sim","similarity","name","confidence","str2stats","strs","split","filter","str_","targets","length","includes","push","map","str2stat","value","datas","substring","value_","replaceAll","replaceItem","statKey","key_i","statDef","Number","ArtifactScan","left","right","mid","buf","worker","setProgress","ArtifactScanStr","console","log","warning","error","isAlphabet","charAt","res","set","rarity","star","level","mainstat","mainKey","mainValue","mainstatKey","substats","substat","stat","src_","performance","now","small","copyTo","resize","aspect","dst","mask","rightMatch","result","maxLoc","cols","leftMatch","all","rightright","leftleft","slimRect","slimImg","maxPoint","rows","midSeparator","topHalfR","trimmedImg","name1p","name2p","part1p","part2p","mainKey1p","mainKey2p","mainValue1p","mainValue2p","star1p","star2p","level1p","level2p","substat1p","substat2p","createWorker","loadLanguage","initialize","fname","setParameters","tessedit_char_whitelist","recognize","toDataURL","data","text","fslot","fmainKey","fmainValue","fstar","flevel","fsubstat","editor","useContext","EditorContext","dummyImgRef","useRef","useState","templateImgs","setTemplateImgs","setWorker","setImgSrc","t","useTranslation","loadTemplate","i1","i2","i3","initWorker","useEffect","templateImgs_","pasteFunc","pasteImage","clipboardData","files","window","addEventListener","removeEventListener","theme","useTheme","uploadImage","setArtifactFromImage","file","setInfo","sevarity","URL","createObjectURL","good","scanned","setArtifact","Box","display","flexDirection","gap","IconTextButton","icon","faCamera","color","palette","info","dark","onChange","type","accept","hidden","style"],"sourceRoot":""}